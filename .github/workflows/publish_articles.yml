name: Football Predictions Publishing

on:
  # Esegui automaticamente ogni 6 ore
  schedule:
    - cron: '0 */6 * * *'
  
  # Consenti l'esecuzione manuale
  workflow_dispatch:
    inputs:
      publish_only:
        description: 'Pubblica solo articoli in attesa'
        type: boolean
        default: false
      cleanup_only:
        description: 'Rimuovi solo articoli scaduti'
        type: boolean
        default: false
      test_mode:
        description: 'Esegui in modalità test'
        type: boolean
        default: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create directories
        run: |
          mkdir -p logs
          mkdir -p data

      - name: Setup Firebase credentials
        run: |
          echo '${{ secrets.FIREBASE_CREDENTIALS }}' > firebase_credentials.json
          echo "FIREBASE_CREDENTIALS=$(pwd)/firebase_credentials.json" >> $GITHUB_ENV
          echo "FIREBASE_DB_URL=${{ secrets.FIREBASE_DB_URL }}" >> $GITHUB_ENV

      - name: Setup WordPress credentials
        run: |
          echo "WP_URL=${{ secrets.WP_URL }}" >> $GITHUB_ENV
          echo "WP_USER=${{ secrets.WP_USER }}" >> $GITHUB_ENV
          echo "WP_APP_PASSWORD=${{ secrets.WP_APP_PASSWORD }}" >> $GITHUB_ENV

      - name: Test WordPress connection
        run: |
          python -c "
import os
import requests
import sys

def test_wp_connection():
    wp_url = os.environ.get('WP_URL')
    wp_api_key = os.environ.get('WP_APP_PASSWORD')
    
    # Test base URL
    try:
        print(f'Testing connection to {wp_url}')
        response = requests.get(wp_url)
        print(f'Response status: {response.status_code}')
        
        if response.status_code == 200:
            print('✅ Base WordPress connection successful')
        else:
            print(f'❌ Error connecting to WordPress: {response.status_code}')
            print(response.text[:200])
            sys.exit(1)
    except Exception as e:
        print(f'❌ Error: {str(e)}')
        sys.exit(1)
    
    # Test API key
    try:
        custom_api_url = wp_url.replace('/wp/v2', '/football-predictions/v1/publish')
        print(f'Testing API key with endpoint: {custom_api_url}')
        
        headers = {'X-API-Key': wp_api_key}
        response = requests.head(custom_api_url, headers=headers)
        
        print(f'API response status: {response.status_code}')
        
        if response.status_code in [200, 401, 404]:
            print('✅ API endpoint check passed')
            return True
        else:
            print(f'❌ API endpoint check failed: {response.status_code}')
            print(response.text[:200] if hasattr(response, 'text') else 'No response text')
            sys.exit(1)
    except Exception as e:
        print(f'❌ API test error: {str(e)}')
        sys.exit(1)

test_wp_connection()
          "

      - name: Run publication cycle
        if: ${{ !inputs.publish_only && !inputs.cleanup_only }}
        run: |
          python -c "
import sys
import logging
from datetime import datetime

# Configura logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/publishing.log')
    ]
)

# Aggiungi la directory corrente al path
sys.path.insert(0, '.')

try:
    from src.publishing.publisher import run_publication_cycle
    
    print(f'Starting publication cycle at {datetime.now().isoformat()}')
    
    # Esegui il ciclo di pubblicazione
    result = run_publication_cycle(test_mode=${{ inputs.test_mode || false }})
    
    print(f'Publication cycle completed: {result}')
except Exception as e:
    print(f'Error during publication cycle: {str(e)}')
    sys.exit(1)
          "

      - name: Publish pending articles only
        if: ${{ inputs.publish_only }}
        run: |
          python -c "
import sys
from src.publishing.publisher import publish_articles
result = publish_articles(test_mode=${{ inputs.test_mode || false }})
print(f'Publish result: {result}')
          "

      - name: Cleanup expired articles only
        if: ${{ inputs.cleanup_only }}
        run: |
          python -c "
import sys
from src.publishing.publisher import cleanup_articles
result = cleanup_articles()
print(f'Cleanup result: {result}')
          "

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: publishing-logs
          path: logs/
          retention-days: 7
