name: Daily Processing Workflow
on:
  schedule:
    # Run at 00:00, 06:00, 12:00, and 18:00 UTC every day
    - cron: '0 0,6,12,18 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      run_all_steps:
        description: 'Run all workflow steps'
        required: false
        default: 'true'
      run_collection:
        description: 'Run only data collection'
        required: false
        default: 'false'
      run_generation:
        description: 'Run only content generation'
        required: false
        default: 'false'
      run_publishing:
        description: 'Run only article publishing'
        required: false
        default: 'false'

jobs:
  process_data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create necessary directories
        run: |
          mkdir -p /home/runner/football-predictions/creds/
          mkdir -p data/cache
          mkdir -p logs
      
      - name: Setup environment variables
        run: |
          echo "FIREBASE_DB_URL=${{ secrets.FIREBASE_DB_URL }}" >> $GITHUB_ENV
          echo "FOOTBALL_API_KEY=${{ secrets.FOOTBALL_API_KEY }}" >> $GITHUB_ENV
          echo "WP_URL=${{ secrets.WP_URL }}" >> $GITHUB_ENV
          echo "WP_USER=${{ secrets.WP_USER }}" >> $GITHUB_ENV
          echo "WP_APP_PASSWORD=${{ secrets.WP_APP_PASSWORD }}" >> $GITHUB_ENV
      
      - name: Setup Firebase credentials
        run: |
          # Crea un file temporaneo con le credenziali
          echo '${{ secrets.FIREBASE_CREDENTIALS }}' > firebase_credentials.json
          
          # Verifica che il JSON sia valido
          echo "Verifica validità JSON delle credenziali Firebase..."
          if python -c "import json; json.load(open('firebase_credentials.json'))"; then
            echo "✓ JSON valido"
          else
            echo "✗ ERRORE: JSON non valido in FIREBASE_CREDENTIALS"
            cat firebase_credentials.json | head -n 20
            exit 1
          fi
          
          # Copia in diverse posizioni per compatibilità
          cp firebase_credentials.json /home/runner/football-predictions/creds/firebase-credentials.json
          cp firebase_credentials.json firebase-credentials.json
          
          # Imposta le variabili d'ambiente
          echo "FIREBASE_CREDENTIALS=/home/runner/football-predictions/creds/firebase-credentials.json" >> $GITHUB_ENV
          echo "GOOGLE_APPLICATION_CREDENTIALS=/home/runner/football-predictions/creds/firebase-credentials.json" >> $GITHUB_ENV
      
      - name: Initialize Firebase app
        run: |
          echo "Creazione di uno script Python per inizializzare Firebase..."
          cat > init_firebase.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import firebase_admin
          from firebase_admin import credentials, db

          def initialize_firebase():
              try:
                  # Verifica se l'app è già inizializzata
                  if len(firebase_admin._apps) > 0:
                      print("✓ Firebase già inizializzato")
                      return True
                      
                  # Percorsi possibili per le credenziali
                  cred_path = None
                  for path in [
                      os.environ.get('FIREBASE_CREDENTIALS'),
                      'firebase_credentials.json',
                      '/home/runner/football-predictions/creds/firebase-credentials.json'
                  ]:
                      if path and os.path.exists(path):
                          cred_path = path
                          break
                  
                  if not cred_path:
                      print("✗ ERRORE: Nessun file di credenziali Firebase trovato")
                      return False
                  
                  # Inizializza Firebase
                  cred = credentials.Certificate(cred_path)
                  firebase_admin.initialize_app(
                      cred,
                      {'databaseURL': os.environ.get('FIREBASE_DB_URL')}
                  )
                  print("✓ Firebase inizializzato con successo")
                  
                  # Test di connessione
                  db.reference('/').get()
                  print("✓ Connessione al database riuscita")
                  return True
              except Exception as e:
                  print(f"✗ ERRORE durante l'inizializzazione: {str(e)}")
                  return False

          if __name__ == "__main__":
              initialize_firebase()
          EOF
          
          python init_firebase.py
      
      - name: Fix time_utils imports
        run: |
          # Aggiungi get_current_datetime a time_utils.py se mancante
          if ! grep -q "def get_current_datetime" src/utils/time_utils.py; then
            echo "Aggiungendo get_current_datetime a time_utils.py..."
            cat >> src/utils/time_utils.py << 'EOF'

def get_current_datetime(tz: str = "Europe/Rome") -> datetime:
    """Alias per compatibilità con codice esistente"""
    return get_datetime_now(tz)
EOF
          fi
      
      - name: Collect match data
        if: ${{ github.event.inputs.run_all_steps == 'true' || github.event.inputs.run_collection == 'true' || github.event_name == 'schedule' }}
        run: |
          echo "Esecuzione della raccolta dati partite..."
          python -m scripts.daily_coordinator --collect-data
        env:
          FOOTBALL_API_KEY: ${{ secrets.FOOTBALL_API_KEY }}
          FIREBASE_DB_URL: ${{ secrets.FIREBASE_DB_URL }}
          FIREBASE_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
          GOOGLE_APPLICATION_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
      
      - name: Generate content
        if: ${{ github.event.inputs.run_all_steps == 'true' || github.event.inputs.run_generation == 'true' || github.event_name == 'schedule' }}
        run: |
          echo "Generazione contenuti pronostici..."
          python -m scripts.daily_coordinator --generate-content
        env:
          FIREBASE_DB_URL: ${{ secrets.FIREBASE_DB_URL }}
          FIREBASE_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
          GOOGLE_APPLICATION_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
      
      - name: Publish articles
        if: ${{ github.event.inputs.run_all_steps == 'true' || github.event.inputs.run_publishing == 'true' || github.event_name == 'schedule' }}
        run: |
          echo "Pubblicazione articoli su WordPress..."
          python -m scripts.daily_coordinator --publish-articles
        env:
          FIREBASE_DB_URL: ${{ secrets.FIREBASE_DB_URL }}
          FIREBASE_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
          GOOGLE_APPLICATION_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
      
      - name: Update system health
        run: |
          echo "Aggiornamento stato sistema..."
          python -m scripts.daily_coordinator --update-health
        env:
          FIREBASE_DB_URL: ${{ secrets.FIREBASE_DB_URL }}
          FIREBASE_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
          GOOGLE_APPLICATION_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: processing-logs-${{ github.run_id }}
          path: logs/
          retention-days: 7

  cleanup_expired_articles:
    runs-on: ubuntu-latest
    needs: process_data
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create necessary directories
        run: |
          mkdir -p /home/runner/football-predictions/creds/
          mkdir -p logs
      
      - name: Setup Firebase credentials
        run: |
          echo '${{ secrets.FIREBASE_CREDENTIALS }}' > /home/runner/football-predictions/creds/firebase-credentials.json
          echo "FIREBASE_CREDENTIALS=/home/runner/football-predictions/creds/firebase-credentials.json" >> $GITHUB_ENV
          echo "GOOGLE_APPLICATION_CREDENTIALS=/home/runner/football-predictions/creds/firebase-credentials.json" >> $GITHUB_ENV
          echo "FIREBASE_DB_URL=${{ secrets.FIREBASE_DB_URL }}" >> $GITHUB_ENV
      
      - name: Clean up expired articles
        run: |
          echo "Pulizia articoli scaduti..."
          python -m scripts.daily_coordinator --cleanup-expired
        env:
          FIREBASE_DB_URL: ${{ secrets.FIREBASE_DB_URL }}
          FIREBASE_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
          GOOGLE_APPLICATION_CREDENTIALS: /home/runner/football-predictions/creds/firebase-credentials.json
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
      
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-logs-${{ github.run_id }}
          path: logs/
          retention-days: 7
